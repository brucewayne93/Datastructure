#include <iostream>
#include <stack>
#include <string>
#include <cctype>
using namespace std;

int getPrecedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    if (op == '*' || op == '/')
        return 2;
    return 0;
}

string infixToPostfix(const string& infix) {
    stack<char> operators;
    string postfix = "";
    
    for (int i = 0; i < infix.length(); ++i) {
        char ch = infix[i];
        if (isalnum(ch)) {
            postfix += ch;
        } else if (ch == '(') {
            operators.push(ch);
        } else if (ch == ')') {
            while (!operators.empty() && operators.top() != '(') {
                postfix += operators.top();
                operators.pop();
            }
            if (!operators.empty() && operators.top() == '(') {
                operators.pop();
            }
        } else {
            while (!operators.empty() && getPrecedence(ch) <= getPrecedence(operators.top())) {
                postfix += operators.top();
                operators.pop();
            }
            operators.push(ch);
        }
    }
    
    while (!operators.empty()) {
        postfix += operators.top();
        operators.pop();
    }
    
    return postfix;
}

string postfixToInfix(const string& postfix) {
    stack<string> operands;
    
    for (int i = 0; i < postfix.length(); ++i) {
        char ch = postfix[i];
        if (isalnum(ch)) {
            string operand(1, ch);
            operands.push(operand);
        } else {
            string operand2 = operands.top();
            operands.pop();
            string operand1 = operands.top();
            operands.pop();
            string result = "(" + operand1 + ch + operand2 + ")";
            operands.push(result);
        }
    }
    
    return operands.top();
}

int main() {
    string infixExpression = "A*(B+C)/D";
    string postfixExpression = infixToPostfix(infixExpression);
    string infixExpressionFromPostfix = postfixToInfix(postfixExpression);
    
    cout << "Infix to Postfix Conversion:" << endl;
    cout << "Infix Expression: " << infixExpression << endl;
    cout << "Postfix Expression: " << postfixExpression << endl;
    
    cout << "\nPostfix to Infix Conversion:" << endl;
    cout << "Postfix Expression: " << postfixExpression << endl;
    cout << "Infix Expression: " << infixExpressionFromPostfix << endl;
    
    return 0;
}
